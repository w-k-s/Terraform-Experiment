name: "7. Orchestrated Service - Deploy"
on:
  workflow_dispatch:
    branches:
      - master

env:
  # If this is made a secret, then its value will be masked when piped to GITHUB_OUTPUT.
  # Apparently, if the value of a secret appears in any job output then it that the value is masked in the output.
  # For example:
  # - Let's say there's a secret `AWS_DEFAULT_REGION=ap-south-1`
  # - Now let's say the command `terraform output -raw ecr_repository_url` outputs `something.ap-south-1.something`.
  # - If we pipe the output of  `terraform output -raw ecr_repository_url` to `$GITHUB_OUTPUT`, Actions will check if the output contains any secret value, that value will be masked in the ouput.
  # - So $GITHUB_OUTPUT will contain `something.**********.something` rather than `something.ap-south-1.something`,
  AWS_DEFAULT_REGION: "ap-south-1"

jobs:
  # Order Service
  create-order-service-repository:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      ecr_repository_url: ${{ steps.create_order_service_repository.outputs.ecr_repository_url }}
    defaults:
      run:
        working-directory: ./7-OrchestratedServices/terraform/order-service/ecr
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.7"
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
      - name: Terraform Deploy
        run: terraform apply -auto-approve
      - name: Save Repository URL to output
        id: create_order_service_repository
        run: echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> "$GITHUB_OUTPUT"
      - name: Summary
        env: 
          REPOSITORY_URL: ${{ steps.create_order_service_repository.outputs.ecr_repository_url }}
        run: echo "$REPOSITORY_URL" >> "$GITHUB_STEP_SUMMARY"

  order-service:
    needs: 
      - create-order-service-repository
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      IMAGE_TAG: "${{ needs.create-order-service-repository.outputs.ecr_repository_url }}:${{ github.run_number }}"
    defaults:
      run:
        working-directory: ./7-OrchestratedServices/backend/order-service
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "adopt"
          cache: maven
      - name: Run tests
        run: mvn -s ./../../../.github/settings.xml -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn clean install -DskipTests
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          echo "Image Tag: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
      - name: Summary
        id: push
        run: |
          echo "image=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "$IMAGE_TAG" >> $GITHUB_STEP_SUMMARY

  # Shipping Price Service
  create-shipping-service-repository:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    outputs:
      ecr_repository_url: ${{ steps.create_shipping_service_repository.outputs.ecr_repository_url }}
    defaults:
      run:
        working-directory: ./7-OrchestratedServices/terraform/shipping-price/ecr
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.7"
          terraform_wrapper: false
      - name: Terraform Init
        run: terraform init
      - name: Terraform Deploy
        run: terraform apply -auto-approve
      - name: Terraform Output 1
        id: create_shipping_service_repository
        run: echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> "$GITHUB_OUTPUT"
      - name: Summary
        env: 
          REPOSITORY_URL: ${{ steps.create_shipping_service_repository.outputs.ecr_repository_url }}
        run: echo "$REPOSITORY_URL" >> "$GITHUB_STEP_SUMMARY"

  shipping-price-service:
    needs: 
      - create-shipping-service-repository
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      IMAGE_TAG: "${{ needs.create-shipping-service-repository.outputs.ecr_repository_url }}:${{ github.run_number }}"
    defaults:
      run:
        working-directory: ./7-OrchestratedServices/backend/shipping-price
    outputs:
      image: ${{ steps.push.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "adopt"
          cache: maven
      - name: Run tests
        run: mvn -s ./../../../.github/settings.xml -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn clean install -DskipTests
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
          mask-aws-account-id: 'no'

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        run: |
          echo "Image Tag: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG
      - name: Summary
        id: push
        run: |
          echo "image=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "$IMAGE_TAG" >> $GITHUB_STEP_SUMMARY

  # Run rest of terraform
  terraform:
    needs: 
      - order-service
      - shipping-price-service
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    defaults:
      run:
        working-directory: ./7-OrchestratedServices/terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.3.7"
      - name: Terraform Init
        run: terraform init
      - name: Terraform Deploy
        run: terraform apply -auto-approve
      - name: Generate Kubeconfig file
        run: aws eks update-kubeconfig --region $(terraform output -raw region) --name $(terraform output -raw cluster_name)
      - name: Upload kubeconfig artifact
        uses: actions/upload-artifact@v3
        with:
          name: kubeconfig
          path: ~/.kube/config